import pickle
from ecoSystem import Ecosystem
from predator import Predator
from victim import Victim
from plant import Plant
from foodChain import FoodChain


class EcosystemCLI:
    def __init__(self):
        self.ecosystem = Ecosystem()
        self.SAVE_FILE = "ecosystem_state.pkl"

    def show_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\nüåç Ecosystem Manager")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ")
        print("2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—â–µ–≤—ã–º–∏ —Ü–µ–ø–æ—á–∫–∞–º–∏")
        print("3. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        print("7. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        print("8. –í—ã—Ö–æ–¥")

    def _get_input(self, prompt, validation=None):
        while True:
            try:
                value = input(prompt)
                if validation:
                    validation(value)
                return value
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")

    def add_animal(self):
        try:
            animal_type = self._get_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-–•–∏—â–Ω–∏–∫/2-–î–æ–±—ã—á–∞): ",
                lambda x: x in ("1", "2") or _invalid("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø")
            )

            name = self._get_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
            species = self._get_input("–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥: ")

            if animal_type == "1":
                animal = Predator(name, species)
            else:
                animal = Victim(name, species)

            self.ecosystem.addAnimal(animal)
            print(f"‚úÖ {animal.__class__.__name__} {name} –¥–æ–±–∞–≤–ª–µ–Ω!")

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: {str(e)}")

    def manage_food_chains(self):
        try:
            print("\nüîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—â–µ–≤—ã–º–∏ —Ü–µ–ø–æ—á–∫–∞–º–∏")
            print("1. –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É")
            print("2. –£–¥–∞–ª–∏—Ç—å —Ü–µ–ø–æ—á–∫—É")
            choice = self._get_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", lambda x: x in ("1", "2"))

            if choice == "1":
                self._add_food_chain()
            else:
                self._remove_food_chain()

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∞–º–∏: {str(e)}")

    def _add_food_chain(self):
        chain = FoodChain()
        num_links = int(self._get_input("–°–∫–æ–ª—å–∫–æ –∑–≤–µ–Ω—å–µ–≤ –¥–æ–±–∞–≤–∏—Ç—å: ", lambda x: x.isdigit()))

        for i in range(num_links):
            print(f"\nüåÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–Ω–∞ {i + 1}/{num_links}")
            organism = self._select_organism()
            chain.add_link(organism)

        self.ecosystem.addFoodChain(chain)
        print("‚úÖ –¶–µ–ø–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    def _remove_food_chain(self):
        if not self.ecosystem.foodChains:
            print("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫!")
            return

        print("\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫:")
        for i, chain in enumerate(self.ecosystem.foodChains, 1):
            print(f"{i}. {chain.show_info()}")

        index = int(self._get_input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ø–æ—á–∫–∏: ",
                                    lambda x: x.isdigit() and 1 <= int(x) <= len(self.ecosystem.foodChains))) - 1

        self.ecosystem.removeFoodChain(self.ecosystem.foodChains[index])
        print("‚úÖ –¶–µ–ø–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    def _select_organism(self):
        print("1. –ñ–∏–≤–æ—Ç–Ω–æ–µ")
        print("2. –†–∞—Å—Ç–µ–Ω–∏–µ")
        choice = self._get_input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞: ",
                                 lambda x: x in ("1", "2") or _invalid("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—ã–±–æ—Ä"))

        if choice == "1":
            return self._select_from_list("–ñ–∏–≤–æ—Ç–Ω—ã–µ", self.ecosystem.animals)
        return self._select_from_list("–†–∞—Å—Ç–µ–Ω–∏—è", self.ecosystem.plants)

    def _select_from_list(self, title, items):
        if not items:
            raise ValueError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {title.lower()}!")

        print(f"\n{title}:")
        for i, item in enumerate(items, 1):
            print(f"{i}. {item.name} ({item.species})")

        index = int(self._get_input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ",
                                    lambda x: x.isdigit() and 1 <= int(x) <= len(items))) - 1

        return items[index]

    def add_plant(self):
        try:
            name = self._get_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: ")
            species = self._get_input("–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è: ")
            plant = Plant(name, species, is_edible=True)
            self.ecosystem.addPlant(plant)
            print(f"üåø –†–∞—Å—Ç–µ–Ω–∏–µ {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è: {str(e)}")

    def run_simulation(self):
        try:
            print("\nüîÅ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
            self.ecosystem.interact()
            self.ecosystem.reproduceAndSurvive()
            self.ecosystem.consumeResources()
            self.ecosystem.checkBalance()
            self.ecosystem.defend_against_threats()
            print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")

    def show_info(self):
        try:
            print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
            print(f"–í—Å–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤: {len(self.ecosystem.animals) + len(self.ecosystem.plants)}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—â–µ–≤—ã—Ö —Ü–µ–ø–æ—á–µ–∫: {len(self.ecosystem.foodChains)}")

            if self.ecosystem.foodChains:
                print("\nüç¥ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∏—â–µ–≤—ã–µ —Ü–µ–ø–æ—á–∫–∏:")
                for i, chain in enumerate(self.ecosystem.foodChains, 1):
                    print(f"{i}. {chain.show_info()}")

            print("\nüå± –ë–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ:")
            self.ecosystem.bioDiversity.showInfo()

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

    def save_state(self):
        try:
            with open(self.SAVE_FILE, "wb") as f:
                pickle.dump(self.ecosystem, f)
            print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def load_state(self):
        try:
            with open(self.SAVE_FILE, "rb") as f:
                self.ecosystem = pickle.load(f)
            print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
        except FileNotFoundError:
            print("‚ö† –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def main(self):
        while True:
            try:
                self.show_menu()
                choice = self._get_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ",
                                         lambda x: x in map(str, range(1, 9)))

                actions = {
                    "1": self.add_animal,
                    "2": self.manage_food_chains,
                    "3": self.add_plant,
                    "4": self.run_simulation,
                    "5": self.show_info,
                    "6": self.save_state,
                    "7": self.load_state,
                    "8": lambda: print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!") or exit()
                }

                actions[choice]()

            except Exception as e:
                print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


def _invalid(message):
    raise ValueError(message)


if __name__ == "__main__":
    cli = EcosystemCLI()
    cli.main()